from torch import optim
import torch.nn as nn
import torch


def train_net(net, device, data_path, epochs=100, batch_size=1, lr=0.00001):
    train_dataset = Generate_Dataset(data_path)
    train_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                               batch_size=batch_size,
                                               shuffle=True)
    optimizer = optim.Adam(net.parameters(), lr=lr)
    criterion = nn.BCEWithLogitsLoss()
    best_loss = float('inf')

    for epoch in range(epochs):
        print('epoch:',epoch)
        net.train()
        for data, label in train_loader:
            optimizer.zero_grad()

            data = data.to(device=device, dtype=torch.float32)
            label = label.to(device=device, dtype=torch.float32)

            pred = net(data)
            loss = criterion(pred, label)
            print('Loss/train', loss.item())
            if loss < best_loss:
                best_loss = loss
                torch.save(net.state_dict(), 'best_model.pth')
            loss.backward()
            optimizer.step()


if __name__ == '__main__':
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    net = UNet3D(1, 1)
    net.to(device=device)

    data_path = "./dataset/"
    train_net(net, device, data_path)

