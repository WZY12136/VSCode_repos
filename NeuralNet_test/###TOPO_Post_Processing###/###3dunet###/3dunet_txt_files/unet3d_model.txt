
class UNet3D(nn.Module):
    def __init__(self,in_channels, n_classes):
        super(UNet3D, self).__init__()
        self.in_channels = in_channels
        self.n_classes = n_classes

        #Encoder
        self.inc = DoubleConv3d_init(in_channels, 64)
        self.down1 = Down(64, 128)
        self.down2 = Down(128, 256)
        self.down3 = Down(256, 512)

        #Decoder
        self.up1 = Up(768, 256)
        self.up2 = Up(384, 128)
        self.up3 = Up(192, 64)
        self.outc = OutConv(64, n_classes)

    def forward(self, input):
        out1 = self.inc(input)
        print('out1.shape:',out1.shape)
        out2 = self.down1(out1)
        print('out2.shape:',out2.shape)
        out3 = self.down2(out2)
        print('out3.shape:',out3.shape)
        out4 = self.down3(out3)
        print('out4.shape:',out4.shape)
        out5 = self.up1(out4, out3)
        print('out5.shape:',out5.shape)
        out6 = self.up2(out5, out2)
        print('out6.shape:',out6.shape)
        out7 = self.up3(out6, out1)
        print('out7.shape:',out7.shape)
        logits = self.outc(out7)
        print('logits.shape:',logits.shape)
        return logits

if __name__ == '__main__':
    
    net = UNet3D(in_channels =3 ,n_classes=3)
    print(net)
    para = list(net.parameters())
    print('parameters:', para)